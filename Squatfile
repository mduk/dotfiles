
################################################################################
# Generated: Fri 22 May 22:08:03 BST 2020
################################################################################


################################################################################
# Environment
################################################################################

if [[ -f $HOME/Development/mduk/BashPlayground/var-dump.sh ]]
then source $HOME/Development/mduk/BashPlayground/var-dump.sh
fi

export ESP_DIR="$HOME/.arduino15/packages/esp8266/hardware/esp8266/2.5.2/"

# Declare the location of my general Development directory
export DEV_DIR="$HOME/Development"


# Default editor should always be vim
export EDITOR="vim"
export VISUAL="vim"


# Don't want Python VirtualEnv's default prompt modification
# I'll take care of that myself in ps1.sh
export VIRTUAL_ENV_DISABLE_PROMPT=1


# Enable Chruby if installed
if [[ -f /usr/local/share/chruby/chruby.sh ]]
then source /usr/local/share/chruby/chruby.sh
fi


# Hardware
case "$(hostname)" in
  eddie)
    export WIFI_INTERFACE='wlp59s0'
    export XINPUT_TOUCHSCREEN='Wacom HID 488E Finger'
    export XRANDR_INTERNAL='eDP-1'
    export XRANDR_HDMI='DP-3'
    export SYS_DISPLAY_INTERNAL='/sys/class/drm/card0-eDP-1'
    export SYS_DISPLAY_EXTERNAL='/sys/class/drm/card0-DP-3'
    ;;

  queeg)
    export WIFI_INTERFACE='wlp3s0'
    export XINPUT_TOUCHSCREEN=''
    export XRANDR_INTERNAL='LVDS-1'
    export XRANDR_HDMI='DP-1'
    export SYS_DISPLAY_INTERNAL='/sys/class/drm/card0-LVDS-1'
    export SYS_DISPLAY_EXTERNAL='/sys/class/drm/card0-DP-1'
    ;;

esac


# Appearance
export DMENU_FONT='fixed:pixelsize=32'
export GTK_THEME='Adwaita-dark'
export QT_STYLE_OVERRIDE='Adwaita-dark'
export TERM="xterm-256color"

if [[ $(hostname) == eddie ]]
then
  export QT_AUTO_SCREEN_SCALE_FACTOR='true'
  export QT_SCALE_FACTOR='1.5'
fi

shopt -s autocd

export GR="1.61803398875"

################################################################################
# Functions
################################################################################

b2d() {
  echo "obase=10; ibase=2; $1" | bc
}
b2h() {
  echo "obase=16; ibase=2; $1" | bc
}
bkp() {
  cp "$1" ".$1.bkp"
}
function cdd {
  cd "${DEV_DIR}/${1}"
}
cdtmp() {
  cd $(mktemp -d)
}
function c {
  if [ -z "$@" ]
  then clear
  else echo "scale=3; $@" | bc -q
  fi
}
clone() {
  set -e

  GITHUB_USERNAME="mduk"

  if [[ -z ${DEV_DIR+x} ]]; then
      DEV_DIR="${HOME}/Development"
  fi

# Stash and BitBucket like to give you the entire command
#   Strip off the 'git clone' portion if it's present
  remote=$(echo "$*" | sed 's/git clone//')

  if [[ $remote != *"@"* ]] && [[ $remote != "http"* ]]; then
      vendor=$(echo $remote | cut -d/ -f1)
      if [[ $vendor == $GITHUB_USERNAME ]]
      then
          remote="git@github.com:${remote}.git"
          local_path=$(echo $remote | cut -d: -f2 | cut -d. -f1)
      else
          remote="https://github.com/${remote}.git"
          local_path=$(echo $remote | cut -d/ -f4- | cut -d. -f1)
      fi
  else
      if [[ $remote == *"@"* ]]; then
          local_path=$(echo $remote | cut -d: -f2 | cut -d. -f1)
      else
          local_path=$(echo $remote | cut -d/ -f4- | cut -d. -f1)
      fi
  fi

# Build a local repo path
  local_path="${DEV_DIR}/${local_path}"

  echo "Cloning: ${remote}"
  echo "   Into: ${local_path}"
  echo

  mkdir -pv "$local_path"
  git clone --recursive "${remote}" "${local_path}"

  echo
  echo "Complete"

  cd "$local_path"
}
d2b() {
  echo "obase=2; ibase=10; $1" | bc
}
d2h() {
  echo "obase=16; ibase=10; $1" | bc
}
ecb() {
  declare tmpfile=$(mktemp)
  cb > $tmpfile
  e $tmpfile
}
function f {
  find . -name "*$1*" | hl "$1"
}
function fuckyoucitrix() {
  kill $(ps ax | grep ICAClient | grep -v grep | tail -n 1 | awk '{print $1}')
}

function g {
    grep --color=always \
         --exclude=*.swp \
         --exclude=*.pyc \
         --exclude-dir=.git/ \
         --recursive \
         --line-number \
         "$1" \
         "${2:-.}"
}
function gi {
    grep --color=always \
         --exclude=*.swp \
         --exclude=*.pyc \
         --exclude-dir=.git/ \
         --recursive \
         --line-number \
         --ignore-case \
         "$1" \
         "${2:-.}"
}
glll() {
  git log --pretty=format:"%h%x09%an%x09%ad%x09%s" | while IFS=$'\t' read hash author date message
    do echo -e "[$hash] $author\t: $message"
    done | column -ts$'\t' | less -RS
}
h2b() {
  echo "obase=2; ibase=16; $1" | bc
}
h2d() {
  echo "obase=10; ibase=16; $1" | bc
}
# http://stackoverflow.com/questions/1763891/can-stdout-and-stderr-use-different-colors-under-xterm-konsole
hlerr()(
  set -o pipefail;"$@" 2>&1>&3 | sed $'s,.*,\e[91m\e[1m&\e[7m,' >&2
) 3>&1
function hl {
    sed -e "s/\($1\)/\x1b[7m\1\x1b[0m/g"
}
function hli {
    sed -e "s/\($1\)/\x1b[7m\1\x1b[0m/gi"
}
i3-arrange() {
    i3-msg "workspace $1; append_layout $HOME/.config/i3/workspace-$1.json"
}
i3-save() {
    i3-save-tree --workspace $1 \
        | sed -e '/instance/d' \
              -e '/title/d' \
              -e '/transient_for/d' \
              -e '/window_role/d' \
              -e 's|//\(.*\),|\1|' \
              -e '/\/\//d' > "$HOME/.config/i3/workspace-$1.json"
}
mkcd() {
  mkdir "$@"
  cd "$@"
}
rm() {
  if git branch &>/dev/null
  then
    for file in "$@"
    do
      if [[ ! -r "$file" ]]
      then
        echo "$file doesn't exist"
        continue
      fi

      if git ls-files --error-unmatch "$file" &>/dev/null
      then
        echo "$file is tracked by git. Do you want to remove from there too?"
        read yn
        if [[ ${yn^^} == Y* ]]
        then git rm "$file"
        else command rm "$file"
        fi
      else
        echo "\"$file\" is untracked and you cannot be trusted!"
        echo "Type out the whole path to confirm that you really do want to DELETE THIS FOREVER."
        read confirm
        if [[ $confirm == $file ]]
        then
          echo "Very well. Give him cake."
          command rm "$file"
        fi
      fi
    done
  else
    command rm -i "$@"
  fi
}
function tn() {
    host="$1"
    port="$2"

    telnet "$host" "$port"
}
function tns() {
    host="$1"
    port="$2"

    openssl s_client \
        -connect "${host}:${port}"
}
function venv {
    if [[ ! -d venv ]]; then
        virtualenv venv
    fi

    if [[ ${VIRTUAL_ENV:=unset} = "unset" ]]; then
        source venv/bin/activate
    else
        deactivate
    fi
}

################################################################################
# Aliases
################################################################################

alias 10print="while true
do
  printf "\xe2\x95\xb$((1 + ($RANDOM & 1)))"
done"
alias backup="rsync \
  --archive \
  --verbose  \
  --delete \
  --ignore-existing \
  --exclude 'Screencasts/*.nut' \
  --exclude '.cache' \
  --exclude '.dbus' \
  --exclude '.local/share/Trash' \
  "$HOME/" \
  /media/daniel/Backup"
alias cb="xsel --clipboard"
alias cdf="cd $DOT_DIR"
alias cl="crane lift"
alias cs="crane status"
alias cu="composer update"
alias de="docker exec"
alias dr="docker run --rm"
alias drm="docker rm"
alias ehosts="se /etc/hosts"
alias ei3="e ~/.config/i3/config"
alias epb="e $HOME/.config/polybar/config"
alias evrc="e ~/.vimrc"
alias ffs="fucking !!"
alias focused-window-id="xdpyinfo | 'sed' '-nr' '/^focus/s/.+(0x[0-9a-fA-F]+),.+/\1/p'"
alias fucking="sudo"
alias ga="git add"
alias gb="git checkout"
alias gbl="git branch"
alias gbn="git branch --no-color | sed -n '/^\*/s/^\* //p'"
alias gca="gc --amend"
alias gc="git commit"
alias gcb="git checkout -b"
alias gd="git diff"
alias gds="git diff --staged"
alias gei="e .gitignore"
alias gf="git fetch"
alias glla="gll --decorate --graph"
alias gll="git log --oneline"
alias gls="gs -s"
alias gmv="git mv"
alias gp="git pull"
alias gpo="git push origin"
alias gpom="gpo master"
alias gpot="gpo --tags"
alias grh="git reset HEAD"
alias grm="git rm -r"
alias gs="git status"
alias h="cd ~"
alias ifconfig="ifconfig | sed 's/HWaddr .*/HWaddr ##:##:##:##:##:##/'"
alias lastcmd="history | tail -2 | head -1 | sed 's/ [0-9]\+ *//'"
alias lla="ll -a"
alias ll="ls -lh --color=auto"
alias lld="ll -d */"
alias ls="ls -N"
alias mext="sudo mount"
alias mp="mpc --password ${MPD_PASS}"
alias mpn="mp next"
alias mpp="mp prev"
alias mps="mp stop"
alias mpt="mp toggle"
alias ni="npm install"
alias nocaps="setxkbmap -option ctrl:nocaps"
alias nr="npm run"
alias nt="npm test"
alias pa="pacmd"
alias pcsf="php-cs-fixer fix ."
alias pf="pip freeze"
alias pfr="pf | grep -v pkg-resources > ./requirements.txt"
alias pi="pip install"
alias pido="ssh pi@raspberrypi.local -i $HOME/.ssh/eddie2pi_rsa -X"
alias r="ranger"
alias sapt="sudo apt"
alias sapti="sudo apt install"
alias stderr=">&2 echo"
alias strtolower="tr '[:upper:]' '[:lower:]'"
alias strtoupper="tr '[:lower:]' '[:upper:]'"
alias t2="tree -L 2"
alias t3="tree -L 3"
alias t4="tree -L 4"
alias t="t4"
alias v="vagrant"
alias vbls="vagrant box list"
alias vd="vagrant halt"
alias vp="vagrant provision"
alias vr="vagrant reload"
alias vssh="vagrant ssh"
alias vu="vagrant up"
alias xnest="Xnest"
